There are several ways of doing indexing manually

1. naive way.
Read the whole table and filter for all conditions

2. a bit naive way
Save the index in memory and save each primary as value

3. a bitmap index
each index will be exploded. Example
gender: female, male & location: berlin, hamburg, cologne
the bitmap index length is now 5 because we have possibilities. In mysql someone can't live in berlin & hamburg here someone can

lets see: 
* alice live in hamburg and is female
her index is now: 10010 ( ones for each fullfilling condition )
* bob is from berlin and male: 01100

Surely there is no limitation that the bitmap index key only points to a single value, it can be a sorted list ( by timestamp )
as well.
This index can be implemented in any Key/Value Database, whereas it should know lists



Redis would be a candidate, but it is know as it wastes memory when saving highly reduntant little data.
Cassandra would be suited because 




4. b-tree index
A b-tree index is a widely used indexing form in databases ( don't mix it up with binary trees )
Since a tree is a special graph an ordinary rdbms is not suited. Key/Value Stores are neither, 



Root -> Gender:male -> List of Keys
Root -> Gender:female -> List of Keys
Root -> Lives:Hamburg -> List of Keys
Root -> Lives:Berlin -> List of Keys
Root -> Lives:Cologne -> List of Keys
Root -> Gender:male -> Lives:Hamburg -> List of Keys
Root -> Gender:male -> Lives:Berlin -> List of Keys
Root -> Gender:male -> Lives:Cologne -> ...
Root -> Gender:female -> Lives:Hamburg -> ... 
Root -> Gender:female -> Lives:Berlin -> ...
Root -> Gender:female -> Lives:Cologne -> ...

The complexity to update shouldn't be higher then in a graph database. 

======================================================================
Now, we are getting a real Insert

Now, we are getting a real Update

